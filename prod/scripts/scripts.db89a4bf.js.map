{"version":3,"sources":["scripts/index.js"],"names":["syncScroll","scrollWrap","document","querySelector","followScroll","addEventListener","e","scrollLeft","target","trCheckbox","checkboxes","querySelectorAll","length","forEach","checkbox","tr","closest","checked","elChangeClass","checkboxAll","checkboxesTable","item","searchRowInit","rows","resetSwitchActive","reset","classList","remove","add","row","inputHandler","input","data","value","trim","sortButtonHandler","buttons","button","isAsc","contains","isDesc","trEditHandler","success","inputs","saveDataFromInout","cellData","offsetParent","innerHTML","split","map","join","key","elem","cls","window","onload"],"mappings":"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","file":"scripts.db89a4bf.js","sourceRoot":"../../src","sourcesContent":["// TODO: менять класс кнопки сортировки при клике на кнопку сортировки в шапке таблицы\n\n// синхронизирует смещение нижней таблицы с таблице у которой scrollbar\nfunction syncScroll () {\n\tconst scrollWrap = document.querySelector ( \".wrap-table-scroll\" );\n\tconst followScroll = document.querySelector ( \".wrap-table-scroll-follow\" );\n\n\tif ( !scrollWrap && !followScroll ) {\n\t\treturn false;\n\t}\n\n\tscrollWrap.addEventListener ( \"scroll\", ( e ) => {\n\t\tfollowScroll.scrollLeft = e.target.scrollLeft;\n\t} );\n}\n\n// функция проверяет если выбран checkbox в tr,  то выделяет tr\nfunction trCheckbox () {\n\t// выбрать все checkbox в таблице кроме checkbox с классом checkbox-all\n\tconst checkboxes = document.querySelectorAll ( \".cell__checkbox:not(.checkbox-all)\" );\n\n\tif ( checkboxes.length <= 0 ) {\n\t\treturn false;\n\t}\n\n\tcheckboxes.forEach ( ( checkbox ) => {\n\t\tcheckbox.addEventListener ( \"change\", ( e ) => {\n\t\t\tconst tr = e.target.closest ( \".tr\" );\n\n\t\t\t// если есть такой элемент у родителя то выделить его\n\t\t\tif ( tr ) {\n\t\t\t\t// если checkbox выбран то выделить tr\n\t\t\t\tif ( checkbox.checked ) {\n\t\t\t\t\telChangeClass ( tr, \"tr-checked\", \"add\" );\n\t\t\t\t} else {\n\t\t\t\t\telChangeClass ( tr, \"tr-checked\", \"remove\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\t} );\n}\n\n// инициализация checkbox_all\nfunction checkboxAll () {\n\tconst checkboxes = document.querySelectorAll ( \".checkbox-all\" );\n\n\tif ( checkboxes.length === 0 ) {\n\t\treturn false;\n\t}\n\n\tcheckboxes.forEach ( checkbox => {\n\t\tcheckbox.addEventListener ( 'change', ( e ) => {\n\t\t\tconst checked = checkbox.checked;\n\t\t\tconst table = checkbox.closest ( '.table' );\n\t\t\t// выбрать все checkbox в таблице кроме checkbox с классом checkbox-all\n\t\t\tconst checkboxesTable = table.querySelectorAll ( \".cell__checkbox:not(.checkbox-all)\" );\n\n\t\t\t// если checkbox выбран то выделить tr\n\t\t\tif ( checked ) {\n\t\t\t\tcheckboxesTable.forEach ( item => {\n\t\t\t\t\titem.checked = true;\n\t\t\t\t\tconst tr = item.closest ( '.tr' );\n\n\t\t\t\t\t// если есть такой элемент у родителя то выделить его\n\t\t\t\t\tif ( tr ) {\n\t\t\t\t\t\telChangeClass ( tr, \"tr-checked\", \"add\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tcheckboxesTable.forEach ( item => {\n\t\t\t\t\titem.checked = false;\n\t\t\t\t\tconst tr = item.closest ( '.tr' );\n\n\t\t\t\t\t// если есть такой элемент у родителя то выделить его\n\t\t\t\t\tif ( tr ) {\n\t\t\t\t\t\telChangeClass ( tr, \"tr-checked\", \"remove\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n// инициализация поиска в столбцах\nfunction searchRowInit () {\n\tconst rows = document.querySelectorAll ( '.cell__search' );\n\n\tif ( rows.length === 0 ) {\n\t\treturn false\n\t}\n\n\trows.forEach ( row => {\n\t\tinputHandler ( row );\n\t} );\n\n\t// функция слушает события в input\n\tfunction inputHandler ( row ) {\n\t\tconst input = row.querySelector ( '.cell__input' );\n\t\tconst reset = row.querySelector ( '.cell__reset' );\n\n\t\t// действия при вводе в поле данных input\n\t\tinput.addEventListener ( 'input', () => {\n\t\t\tconst data = input.value.trim ();\n\n\t\t\t// если длина строки больше 3х символов то появится кнопка сброса\n\t\t\t// которая удалит содержимое инпута\n\t\t\tif ( data.length > 3 ) {\n\t\t\t\tresetSwitchActive ( reset, true );\n\t\t\t} else {\n\t\t\t\tresetSwitchActive ( reset, false );\n\t\t\t}\n\t\t} );\n\n\t\t// событие при клике на reset\n\t\t// удаляет все содержимое input и прячет кнопку reset\n\t\treset.addEventListener ( 'click', () => {\n\t\t\tinput.value = '';\n\t\t\tresetSwitchActive ( reset, false );\n\t\t} );\n\t}\n\n\t// переключает класс для reset с активного на неактивный\n\tfunction resetSwitchActive ( reset, active = false ) {\n\t\tactive ? reset.classList.remove ( 'hide' ) : reset.classList.add ( 'hide' );\n\t}\n}\n\n// события при клике на кнопку сортировки\nfunction sortButtonHandler () {\n\tconst buttons = document.querySelectorAll ( '.cell__sort' );\n\n\tbuttons.forEach ( button => {\n\t\tbutton.addEventListener ( 'click', () => {\n\t\t\tconst isAsc = button.classList.contains ( 'cell__sorts--asc' );\n\t\t\tconst isDesc = button.classList.contains ( 'cell__sorts--desc' );\n\n\t\t\t// удаляем все активные классы у кнопок сортировки\n\t\t\tbuttons.forEach ( button => {\n\t\t\t\telChangeClass ( button, 'cell__sorts--desc', 'remove' );\n\t\t\t\telChangeClass ( button, 'cell__sorts--asc', 'remove' );\n\t\t\t} );\n\n\t\t\t// переключает класс для кнопки сортировки\n\t\t\tswitch ( true ) {\n\t\t\t\tcase !isAsc :\n\t\t\t\t\telChangeClass ( button, 'cell__sorts--desc', 'remove' );\n\t\t\t\t\telChangeClass ( button, 'cell__sorts--asc', 'add' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase !isDesc :\n\t\t\t\t\telChangeClass ( button, 'cell__sorts--asc', 'remove' );\n\t\t\t\t\telChangeClass ( button, 'cell__sorts--desc', 'add' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n// события для редактируемой строки\nfunction trEditHandler () {\n\tconst tr = document.querySelector ( '.tr--edit' );\n\tconst success = tr.querySelector ( '.cell__button--success' );\n\tconst reset = tr.querySelector ( '.cell__button--error' );\n\tconst inputs = tr.querySelectorAll ( '.cell__input' );\n\n\t// события клавиатуры\n\ttr.addEventListener ( 'keydown', ( e ) => {\n\t\t// если нажали Enter сохранить\n\t\tif ( e.key === 'Enter' ) {\n\t\t\tsaveDataFromInout ( inputs );\n\t\t}\n\n\t\t// если нажали Escape отменить все изменения\n\t\tif (e.key === 'Escape') {\n\t\t\ttr.classList.remove ( 'tr--edit' );\n\t\t}\n\t} );\n\n\tsuccess.addEventListener ( 'click', () => {\n\t\tsaveDataFromInout ( inputs );\n\t} );\n\n\treset.addEventListener ( 'click', () => {\n\t\ttr.classList.remove ( 'tr--edit' );\n\t} );\n\n\t// функция сохраняет значение во всех input строки tr\n\tfunction saveDataFromInout ( inputs ) {\n\t\ttr.classList.remove ( 'tr--edit' );\n\n\t\tinputs.forEach ( input => {\n\t\t\tconst data = input.value.trim ();\n\t\t\tconst parent = input.offsetParent.closest ( '.cell__inner' );\n\t\t\tconst cellData = parent.querySelector ( '.cell__data' );\n\n\t\t\tif ( data !== '' ) {\n\t\t\t\tcellData.innerHTML = '';\n\n\t\t\t\t// разбиваем строку по пробелу на массив\n\t\t\t\t// возвращаем каждый элемент в отдельном теге span\n\t\t\t\t// вставляем значение в ячейку\n\t\t\t\tcellData.innerHTML = data.split ( ' ' ).map ( item => {\n\t\t\t\t\treturn `<span class=\"cell__text\">${ item }</span>`\n\t\t\t\t} ).join ( ' ' );\n\t\t\t}\n\t\t} );\n\t}\n\n}\n\n// добавляет/удаляет класс у элемента\nfunction elChangeClass ( elem, cls, action = 'add' ) {\n\taction === 'add' ? elem.classList.add ( cls ) : elem.classList.remove ( cls );\n}\n\nwindow.onload = function () {\n\tsearchRowInit ();\n\tcheckboxAll ();\n\ttrCheckbox ();\n\tsyncScroll ();\n\tsortButtonHandler ();\n\ttrEditHandler ();\n}\n"]}